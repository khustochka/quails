name: Deploy
on:
  workflow_call:
    inputs:
      image_tag:
        required: true
        type: string
      deploy_env:
        required: true
        type: string
    secrets:
      DEPLOY_SSH_KEY:
        required: true
      DEPLOY_SSH_HOST:
        required: true
      DEPLOY_SCRIPTS_REPO:
        required: true

  workflow_dispatch:
    inputs:
      image_tag:
        type: string
        description: "Image tag (leave empty for latest commit)"
      deploy_env:
        required: true
        description: "Deployment environment"
        type: environment
        default: staging
env:
  REGISTRY_IMAGE: public.ecr.aws/m7x1i1o0/quails

jobs:
  deploy:
    name: "Deploy"
    runs-on: ubuntu-latest
    environment: ${{ inputs.deploy_env }}
    concurrency: ${{ inputs.deploy_env }}
    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          ssh-keyscan -H bitbucket.org >> ~/.ssh/known_hosts
          ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts
          echo "$SSH_KEY" > ~/.ssh/private.key
          chmod 600 ~/.ssh/private.key
          cat >>~/.ssh/config <<END
          Host $SSH_HOST
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/private.key
            ControlMaster auto
            ControlPath ~/.ssh/control-%C
            ControlPersist yes
          Host bitbucket.org
            HostName bitbucket.org
            IdentityFile ~/.ssh/private.key
          END
        shell: bash
        env:
          SSH_HOST: ${{ secrets.DEPLOY_SSH_HOST }}
          SSH_USER: ${{ vars.DEPLOY_SSH_USER }}
          SSH_KEY: ${{ secrets.DEPLOY_SSH_KEY }}

      - name: Checkout deployment scripts
        shell: bash
        run: |
          git clone --no-checkout --depth=1 --filter=tree:0 ${{ secrets.DEPLOY_SCRIPTS_REPO }} deploy-scripts
          cd deploy-scripts
          git sparse-checkout set --no-cone /quails
          git checkout
      - name: Set image tag from input
        if: ${{ inputs.image_tag }}
        shell: bash
        run: |
          echo "IMAGE_TAG=${{ inputs.image_tag }}" >> $GITHUB_ENV

      - name: Docker meta (for image tag)
        if: ${{ inputs.image_tag == '' }}
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=raw,priority=1000,value={{tag}},suffix=,enable=${{ startsWith(github.ref, 'refs/tags/') }}
            type=sha,priority=800,prefix={{branch}}-,suffix=,enable=${{ startsWith(github.ref, 'refs/heads/') }}

      - name: Set image tag from meta
        if: ${{ inputs.image_tag == '' }}
        shell: bash
        run: |
          echo "IMAGE_TAG=${{ fromJSON(steps.meta.outputs.json).tags[0] }}" >> $GITHUB_ENV

      - name: Run deployment script
        shell: bash
        env:
          DOCKER_IMAGE: ${{ env.IMAGE_TAG }}
          DOCKER_HOST: ssh://${{ vars.DEPLOY_SSH_USER }}@${{ secrets.DEPLOY_SSH_HOST }}
          DOCKER_COMPOSE_PROGRESS: plain
        run: cd deploy-scripts/quails && ./deploy ${{ inputs.deploy_env }}
