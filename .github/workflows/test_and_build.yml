name: "Quails Tests & Build"
on:
  - push
jobs:
  test:
    name: Tests
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        ruby: ['2.7', '3.0', '3.1.2', '3.2.0-preview3']
    services:
      postgres:
        image: postgres:14-alpine
        ports:
          - "5432:5432"
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          POSTGRES_USER: quails
          POSTGRES_DB: quails_test
          POSTGRES_PASSWORD: "quails"
    env:
      BUNDLE_WITHOUT: development
      RAILS_ENV: test
      DATABASE_URL: "postgres://quails:quails@localhost:5432/quails_test"
      MINITEST_REPORTER: Minitest::Reporters::SpecReporter
      COVERAGE: 1
      PARALLEL_WORKERS: 1
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Find yarn cache location
        id: yarn-cache
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
      - name: JS package cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install packages
        run: |
          bin/yarn install --pure-lockfile
      - name: Install Ruby and gems
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          bundler-cache: true
      - name: Set up database schema
        run: bin/rails db:schema:load
      - name: Run tests
        run: bin/rake
      - name: Code coverage results
        uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: Coverage
          path: coverage/

  system_test:
    name: ${{ matrix.driver.name }} system tests (${{ matrix.ruby }})
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        ruby: ['2.7', '3.0', '3.1.2', '3.2.0-preview3']
        driver:
          - name: Chrome
            js_driver: selenium
            js_browser: headless_chrome
          - name: Firefox
            js_driver: selenium
            js_browser: headless_firefox
    services:
      postgres:
        image: postgres:14-alpine
        ports:
          - "5432:5432"
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          POSTGRES_USER: quails
          POSTGRES_DB: quails_test
          POSTGRES_PASSWORD: "quails"
    env:
      BUNDLE_WITHOUT: development
      RAILS_ENV: test
      DATABASE_URL: "postgres://quails:quails@localhost:5432/quails_test"
      MINITEST_REPORTER: Minitest::Reporters::SpecReporter
      PARALLEL_WORKERS: 1
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Find yarn cache location
        id: yarn-cache
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
      - name: JS package cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install packages
        run: |
          bin/yarn install --pure-lockfile
      - name: Install Ruby and gems
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          bundler-cache: true
      - name: Set up database schema
        run: bin/rails db:schema:load
      - name: Run tests
        env:
          # To prevent ugly xvfb warning
          XDG_RUNTIME_DIR: '/tmp/runtime-runner'
          JS_DRIVER: ${{ matrix.driver.js_driver }}
          JS_BROWSER: ${{ matrix.driver.js_browser }}
        run: xvfb-run bin/rake test:system
      - name: Screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: Screenshots-${{ matrix.driver.js_driver }}-${{ matrix.driver.js_browser }}
          path: tmp/screenshots
  # Only build if the tests has passed.
  docker_build:
    name: Build and push image
    runs-on: ubuntu-latest
    needs:
      - test
      - system_test
    if: github.ref == 'refs/heads/kubernize'
    steps:
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            public.ecr.aws/m7x1i1o0/quails-app
          tags: |
            type=raw,value=latest
            type=sha
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Registry
        uses: docker/login-action@v2
        with:
          registry: public.ecr.aws
          username: ${{ secrets.DOCKER_AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.DOCKER_AWS_SECRET_ACCESS_KEY }}
        env:
          AWS_REGION: us-east-1

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          # Path context is required for .dockerignore to work.
          context: .
          build-args: |
            GIT_COMMIT=${{ github.sha }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          
#  lint:
#    runs-on: ubuntu-20.04
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#      - name: Install Ruby and gems
#        uses: ruby/setup-ruby@8f312efe1262fb463d906e9bf040319394c18d3e # v1.92
#        with:
#          bundler-cache: true
#      # Add or replace any other lints here
#      - name: Security audit dependencies
#        run: bin/bundler-audit --update
#      - name: Security audit application code
#        run: bin/brakeman -q -w2
#      - name: Lint Ruby files
#        run: bin/rubocop --parallel
