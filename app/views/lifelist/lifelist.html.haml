- @page_title = 'Lifelist'

%h2 Lifelist

= render 'partials/years'

- if @entries.blank?
  %p No species observed.
- else
  - start_count, increment = params[:sort].nil? ? [@entries.size, -1] : [1, 1]
  %ul.horiz-list.filter-list
    %strong Sort by:
    %li= params[:sort].nil? ? 'First seen' : link_to('First seen', params.merge(:sort => nil))
    %li= link_to_unless_current('Last seen', params.merge(:sort => 'last'))
    %li= link_to_unless_current('Count', params.merge(:sort => 'count'))
    %li= link_to_unless_current('Classification', params.merge(:sort => 'class'))

  - sp_row = Proc.new do |i, ob|
    - sp = ob[:name_sci]
    - pst = ob[:code].nil? ? nil : PostsHelper::PseudoPost.new(:code => ob[:code], :face_date => Date.parse(ob[:face_date]), :status => "OPEN")
    - date = l(Date.parse(ob[:aggr_value]), :format => :long)
    -#- first_post = @posts[sp.first_post]
    -#- last_post = @posts[sp.last_post]
    %li.lifer_row{:value => i}
      %span
        = species_link(sp.sp_parameterize, ob[:name_en])
        = name_sci(sp)
      %time= post_link(date, pst, true)
    - i += increment
      
  - if params[:sort] == 'class'
    -#- extract_families(@entries).each do |fam, species_list|
    -#  %tr
    -#    %td
    -#    %td{:colspan => 5}
    -#      %h3= "#{fam[:order].upcase}: #{fam[:family]}"
    -#    - start_count = species_list.inject(start_count, &sp_row)
  - else
    %ol
      - @entries.inject(start_count, &sp_row)