-# frozen_string_literal: true
- stylesheet 'forms'
- @js_controller = :imageForm
- @js_features = [:observDragger, :wikiFields]

- @page_title = "#{new_or_edit_label(@image)} image"

%h1= page_header

- if @image.persisted?
  - provide :add_shortcuts do
    %li= link_to @image.mapped? ? 'Edit map' : '<b>MAP IT!</b>'.html_safe, action: :map_edit
    %li
      = link_to(flickr_photo_path(@image)) do
        - if @image.on_flickr?
          Edit flickr data
        - else
          %b Link to flickr!

= render 'admin/shortcuts' if current_user.admin?

%p
  - if @image.on_flickr?
    This image is
    %b= link_to "linked to flickr photo", @photo.page_url

  - elsif @image.persisted?
    This image is not linked to flickr photo.

  = link_to('Edit flickr link', flickr_photo_path(@image)) if @image.persisted?

- if flash[:alert]
  %div.errors= flash[:alert]

= render partial: 'partials/errors', object: @image.errors

- if params[:exif_date]
  %p#notice Date taken from EXIF, may be incorrect

= simple_form_for @image, html: {class: 'image with_observations'} do |form|

  - if @image.persisted? || (@image.on_storage? && @image.stored_image.persisted?)
    %p= image_tag(@image.thumbnail_variant, class: 'image_pic')
    - if @image.on_storage?
      = form.input :stored_image, as: :hidden, input_html: {value: @image.stored_image.blob.signed_id}
  - else
    = form.input :stored_image
    .dropsection
      .droparea
        %span.drop__text
          Drop a file or <label for="image_stored_image" class="pseudolink dropfallback">select from dialog</label>.

      .drop__preview
      .drop__uploading Uploading&hellip;
      .drop__analyzing Analyzing&hellip;
      .drop__success Success
      .drop__error Error

  %div
    = form.input :slug
    = form.input :title
    - unless @image.flickr_id
      %div.input.boolean
        = check_box_tag "upload_to_flickr"
        %label
          %b Upload to Flickr

  = render partial: 'media/obs_draggable', locals: {media: @image}

  %div
    = form.input :description, input_html: {rows: 7, class: 'wiki_field'}
    = form.input :index_num, input_html: { size: 10, type: :text }
    = form.input :status, collection: Image::STATES, input_html: {size: '5'}, include_blank: false
  .buttons
    = default_submit_button(form)

- if @image.persisted?
  %p= default_destroy_button
